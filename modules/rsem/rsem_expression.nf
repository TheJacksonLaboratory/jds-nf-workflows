process RSEM_EXPRESSION {
    tag "$sampleID"

    cpus 12
    memory 90.GB
    time 24.h
    errorStrategy {(task.exitStatus == 140) ? {log.info "\n\nError code: ${task.exitStatus} for task: ${task.name}. Likely caused by the task wall clock: ${task.time} or memory: ${task.memory} being exceeded.\nAttempting orderly shutdown.\nSee .command.log in: ${task.workDir} for more info.\n\n"; return 'finish'}.call() : 'finish'}

    container 'quay.io/jaxcompsci/rsem_bowtie2_star:0.1.0'

    publishDir "${params.pubdir}/${sampleID}", pattern: "*results*", mode:'copy'

    input:
    tuple val(sampleID), path(bam), path(rsem_ref_files), val(rsem_ref_name)

    output:
    tuple val(sampleID), path("*.stat/*.cnt"), emit: rsem_cnt
    tuple val(sampleID), path("*genes.results"), emit: rsem_genes
    tuple val(sampleID), path("*isoforms.results"), emit: rsem_isoforms
    tuple val(sampleID), path("*.transcript.bam"), emit: transcript_bam
    
    script:

    if (params.read_type == "PE"){
        frag=""
        read_type="--paired-end"
    }
    if (params.read_type == "SE"){
        frag="--fragment-length-mean ${params.fragment_length_mean} --fragment-length-sd ${params.fragment_length_sd}"
        read_type=""
    }

    def output_name = bam.getName() == "${sampleID}.transcript.bam" ? "${sampleID}.rsem_out" : "${sampleID}"
    // Note: If the input BAM, shares the same name as output from RSEM: i.e., ${sampleID}.transcript.bam, 
    // RSEM will fail as the input gets potentially overwritten. This avoids naming collisions. 

    """
    rsem-calculate-expression -p $task.cpus \
    --strandedness ${params.bam_strandedness} \
    ${read_type} \
    ${frag} \
    --alignments \
    ${bam} \
    ${rsem_ref_name} \
    ${output_name}
    """
}

/*
Using an alternative aligner


To use an alternative alignment program, align the input reads against the file reference_name.idx.fa generated by rsem-prepare-reference, and format the alignment output in SAM/BAM/CRAM format. 
Then, instead of providing reads to rsem-calculate-expression, specify the --alignments option and provide the SAM/BAM/CRAM file as an argument.

RSEM requires the alignments of a read to be adjacent. For paired-end reads, RSEM also requires the two mates of any alignment be adjacent. To check if your SAM/BAM/CRAM file satisfy the requirements, run


     rsem-calculate-expression --paired-end \
                               --alignments \
                               -p 8 \
                               /data/mmliver_paired_end_quals.bam \
                               /ref/mouse_125 \
                               mmliver_paired_end_quals


rsem-sam-validator <input.sam/input.bam/input.cram>

If your file does not satisfy the requirements, you can use convert-sam-for-rsem to convert it into a BAM file which RSEM can process. Run

convert-sam-for-rsem --help
*/
